//
//  MB_LayerPicDeploy.cpp
//  ProjectMB
//
//  Created by yuanwugang on 14-11-23.
//
//

#include "MB_LayerPicDeploy.h"
#include "MB_DataShowPic.h"
#include "MB_NodePicIcon.h"
#include "MB_DataShowPic.h"
static float actionDealyTime;
#define PicDeploy_PERLINENUM 6
#define PicDeploy_SPANHEIGHT (0.715f)
MB_LayerPicDeploy* MB_LayerPicDeploy::create(CCSize size,int type)
{
    MB_LayerPicDeploy* ptr = new MB_LayerPicDeploy();
    if (ptr && ptr->init(size,type))
    {
        ptr->autorelease();
        return ptr;
    }
    CC_SAFE_RELEASE_NULL(ptr);
    return NULL;
}
bool MB_LayerPicDeploy::init(CCSize size,int type)
{
    actionDealyTime = 0;
    m_nType = type;
    m_pScrollView = CCScrollView::create(size);
    m_pScrollView->setDirection(kCCScrollViewDirectionVertical);
    this->addChild(m_pScrollView);

    CCLayer* layer = CCLayer::create();
    
    if (type == kTypePetPic)
    {
        for (int i = 2; i <= 7;i++)
        {
            MB_NodePetDeploy* node = MB_NodePetDeploy::create();
            if (node != NULL)
            {
                node->setData(i);
                layer->addChild(node);
                node->setTag(i);
            }
            
        }
    }
    else if(type == kTypeEquipPic)
    {
        for (int i = 2; i <= 7;i++)
        {
            MB_NodeEquipDeploy* node = MB_NodeEquipDeploy::create();
            if (node != NULL)
            {
                node->setData(i);
                layer->addChild(node);
                node->setTag(i);
            }
        }
    }
    else if(type == kTypeTreasurePic)
    {
        MB_NodeTreasureDeploy* node = MB_NodeTreasureDeploy::create();
        if (node != NULL)
        {
            layer->addChild(node);
            node->setTag(1);
        }
    }

    layer->setContentSize(CCSizeMake(640, 1024));
    m_pScrollView->setContainer(layer);
    onClickNode();
    m_pScrollView->setContentOffset(ccp(0,m_pScrollView->getViewSize().height - m_pScrollView->getContentSize().height));
    m_pScrollView->setSwaller(false);
    m_pScrollView->setTouchPriority(-99);
    return true;
}
void MB_LayerPicDeploy::onResetWnd()
{
    if (m_nType == kTypeTreasurePic) {
        std::vector<float> timeV;
        timeV.push_back(actionDealyTime);actionDealyTime+=actionSpanTime;
        MB_NodeDeploy* pChild =dynamic_cast<MB_NodeDeploy*>(m_pScrollView->getContainer()->getChildByTag(1));
        pChild->setDeploy();
        sort();
        NSGameHelper::runMoveAndOptAction(m_pScrollView->getContainer()->getChildByTag(1), timeV[0], actionMoveTime, true, true);
    }else
    {
        std::vector<float> timeV;
        for (int i = 7; i >=2;i--)
        {
            timeV.push_back(actionDealyTime);actionDealyTime+=actionSpanTime;
            MB_NodeDeploy* pChild =dynamic_cast<MB_NodeDeploy*>(m_pScrollView->getContainer()->getChildByTag(i));
            pChild->setDeploy();
        }
        sort();
        for (int i = 7; i >=2;i--)
        {
            NSGameHelper::runMoveAndOptAction(m_pScrollView->getContainer()->getChildByTag(i), timeV[7-i], actionMoveTime, true, true);
        }
    }
}
void MB_LayerPicDeploy::onClickNode()
{
    onResetWnd();
    m_pScrollView->setContentOffset(ccp(0,m_pScrollView->getViewSize().height - m_pScrollView->getContentSize().height));
}
void MB_LayerPicDeploy::sort()
{
    CCArray* pChildren = m_pScrollView->getContainer()->getChildren();
    
    getChildren();
    float y = 0;
    float maxHeight = 0;
    
    
    CCObject* pObj = NULL;
    CCNode* pChild = NULL;
//    float max_width = 0;
    CCSize content_size = CCSizeZero;
    
    CCARRAY_FOREACH_REVERSE(pChildren, pObj)
    {
        pChild = (CCNode*)pObj;
        maxHeight += pChild->getContentSize().height;
    }
    
    CCARRAY_FOREACH_REVERSE(pChildren, pObj)
    {
        pChild = (CCNode*)pObj;
        pChild->setPosition(m_pScrollView->getContentSize().width/2,maxHeight - y+30);
        content_size = pChild->getContentSize();
        y+=content_size.height;
//        max_width = (content_size.width > max_width) ? content_size.width : max_width;
    }
    
    m_pScrollView->setContentSize(CCSizeMake(m_pScrollView->getContentSize().width, y+70));
}


void MB_NodePetDeploy::setData(int nStar)
{
    m_nStar = nStar;
}
void MB_NodePetDeploy::setDeploy()
{
    if (m_pNodeContainer->getChildrenCount() == 0)
    {
        CCArray* arrayShow = CCArray::create();
        CCArray* arrayClient = CCArray::create();
        MB_DataShowPic::getInstance()->getClientMB_PetTemplateArrayByStar(arrayClient,m_nStar);
        setStar(m_nStar);
        CCArray* pArrayServerAll = NULL;
        pArrayServerAll = MB_DataShowPic::getInstance()->getServerMB_PetTemplateArray();
        
        MB_PicShow* pPicShow = NULL;
        CCARRAY_FOREACH_4TYPE(arrayClient, MB_PicShow*, pPicShow)
        {
            bool bIsActivata = false;
            for (int j = 0; j < pArrayServerAll->count(); j++)
            {
                MB_PicShow* data = (MB_PicShow*)pArrayServerAll->objectAtIndex(j);
                if (data->getID() == pPicShow->getID() && data->getShape() == pPicShow->getShape())
                {
                    bIsActivata = true;
                    break;
                }
            }
            if (!bIsActivata && pPicShow->getActivata()) //没激活 也没默认激活  不显示
            {
                continue;
            }
            MB_PicShow* showData = new MB_PicShow();
            showData->setID(pPicShow->getID());
            showData->setShape(pPicShow->getShape());
            showData->setActivata(bIsActivata);
            showData->setIsNew(pPicShow->getIsNew());
            arrayShow->addObject(showData);
            CC_SAFE_RELEASE_NULL(showData);
        }
        
        CCNode* node = CCNode::create();
        node->setAnchorPoint(ccp(0.5,1));
        CCSize cellSize = MB_NodePicIcon::getNodeSize();
        
        int count = arrayShow->count();
        
        char str[5] = {};
        sprintf(str,"/%d",count);
        m_pAllCount->setString(str);
        
        int index = 0;
        node->setContentSize(CCSize(cellSize.width*.74f*PicDeploy_PERLINENUM,11+cellSize.height*PicDeploy_SPANHEIGHT*(count/PicDeploy_PERLINENUM + (count%PicDeploy_PERLINENUM == 0? 0:1))));
        pPicShow = NULL;
        int activeCount = 0;
        CCARRAY_FOREACH_4TYPE(arrayShow, MB_PicShow*, pPicShow)
        {
            MB_NodePicIcon* picNode = MB_NodePicIcon::create2();
            if (picNode != NULL)
            {
                if (pPicShow->getActivata()) {
                    activeCount++;
                }
                picNode->setData(pPicShow,kTypePetPic);
                picNode->setPosition(ccp(cellSize.width*(0.2f+index%PicDeploy_PERLINENUM)*0.83f,-92+(node->getContentSize().height - cellSize.height*PicDeploy_SPANHEIGHT*( -0.55f + int(index/PicDeploy_PERLINENUM)))));
                index++;
                node->addChild(picNode);
                NSGameHelper::runMoveAndOptAction(picNode, actionDealyTime, actionMoveTime, true, true);actionDealyTime+=actionSpanTime;
            }
        }
        m_pNodeContainer->addChild(node);

        sprintf(str,"%d",activeCount);
        m_pNowCount->setString(str);
    }
    onResetWnd();
}



void MB_NodeEquipDeploy::setData(int nStar)
{
    m_nStar = nStar;
}
void MB_NodeEquipDeploy::setDeploy()
{
    if (m_pNodeContainer->getChildrenCount() == 0)
    {
        CCArray* arrayShow = CCArray::create();
        CCArray* arrayClient = CCArray::create();
        MB_DataShowPic::getInstance()->getClientEquipTempleteArrayByStar(arrayClient,m_nStar);
        setStar(m_nStar);
        
        CCArray* pArrayServerAll = NULL;
        pArrayServerAll = MB_DataShowPic::getInstance()->getServerEquipTempleteArray();
        
        MB_PicShow* pPicShow = NULL;
        CCARRAY_FOREACH_4TYPE(arrayClient, MB_PicShow*, pPicShow)
        {
            bool bIsActivata = false;
            for (int j = 0; j < pArrayServerAll->count(); j++)
            {
                MB_PicShow* data = (MB_PicShow*)pArrayServerAll->objectAtIndex(j);
                if (data->getID() == pPicShow->getID())
                {
                    bIsActivata = true;
                    break;
                }
            }
            if (!bIsActivata && pPicShow->getActivata()) //没激活 也没默认激活  不显示
            {
                continue;
            }
            MB_PicShow* showData = new MB_PicShow();
            showData->setID(pPicShow->getID());
            showData->setShape(pPicShow->getShape());
            showData->setActivata(bIsActivata);
            showData->setIsNew(pPicShow->getIsNew());
            arrayShow->addObject(showData);
            CC_SAFE_RELEASE_NULL(showData);
        }
        
        CCNode* node = CCNode::create();
        node->setAnchorPoint(ccp(0.5,1));
        CCSize cellSize = MB_NodePicIcon::getNodeSize();
        
        int count = arrayShow->count();
        char str[5] = {};
        sprintf(str,"/%d",count);
        m_pAllCount->setString(str);
        
        int index = 0;
        int activeCount = 0;
        node->setContentSize(CCSize(cellSize.width*.74f*PicDeploy_PERLINENUM,11+cellSize.height*PicDeploy_SPANHEIGHT*(count/PicDeploy_PERLINENUM + (count%PicDeploy_PERLINENUM == 0? 0:1))));
        pPicShow = NULL;
        CCARRAY_FOREACH_4TYPE(arrayShow, MB_PicShow*, pPicShow)
        {
            MB_NodePicIcon* picNode = MB_NodePicIcon::create2();
            if (picNode != NULL)
            {
                if (pPicShow->getActivata()) {
                    activeCount++;
                }
                picNode->setData(pPicShow,kTypeEquipPic);
                picNode->setPosition(ccp(cellSize.width*(0.2f+index%PicDeploy_PERLINENUM)*0.83f,-92+(node->getContentSize().height - cellSize.height*PicDeploy_SPANHEIGHT*( -0.55f + int(index/PicDeploy_PERLINENUM)))));
                index++;
                node->addChild(picNode);
                NSGameHelper::runMoveAndOptAction(picNode, actionDealyTime, actionMoveTime, true, true);actionDealyTime+=actionSpanTime;
            }
        }
        m_pNodeContainer->addChild(node);
        
        sprintf(str,"%d",activeCount);
        m_pNowCount->setString(str);
    }
    onResetWnd();
}




void MB_NodeTreasureDeploy::setDeploy()
{
    if (m_pNodeContainer->getChildrenCount() == 0)
    {
        CCArray* arrayShow = CCArray::create();
        setTitle("宝物");
        MB_PicShow* pPicShow = NULL;
        CCArray* pArrayClientAll = MB_DataShowPic::getInstance()->getClientTreasureTempleteArray();
        CCArray* pArrayServerAll = MB_DataShowPic::getInstance()->getServerTreasureTempleteArray();
        CCARRAY_FOREACH_4TYPE(pArrayClientAll, MB_PicShow*, pPicShow)
        {
            bool bIsActivata = false;
            for (int j = 0; j < pArrayServerAll->count(); j++)
            {
                MB_PicShow* data = (MB_PicShow*)pArrayServerAll->objectAtIndex(j);
                if (data->getID() == pPicShow->getID())
                {
                    bIsActivata = true;
                    break;
                }
            }
            if (!bIsActivata && pPicShow->getActivata()) //没激活 也没默认激活  不显示
            {
                CCLog("const char *pszFormat, ...");
                continue;
            }
            MB_PicShow* showData = new MB_PicShow();
            showData->setID(pPicShow->getID());
            showData->setShape(pPicShow->getShape());
            showData->setActivata(bIsActivata);
            showData->setIsNew(pPicShow->getIsNew());
            arrayShow->addObject(showData);
            CC_SAFE_RELEASE_NULL(showData);
        }
        
        CCNode* node = CCNode::create();
        node->setAnchorPoint(ccp(0.5,1));
        CCSize cellSize = MB_NodePicIcon::getNodeSize();
        
        int count = arrayShow->count();
        char str[5] = {};
        sprintf(str,"/%d",count);
        m_pAllCount->setString(str);
        
        int index = 0;
        int activeCount = 0;
        node->setContentSize(CCSize(cellSize.width*.74f*PicDeploy_PERLINENUM,11+cellSize.height*PicDeploy_SPANHEIGHT*(count/PicDeploy_PERLINENUM + (count%PicDeploy_PERLINENUM == 0? 0:1))));
        pPicShow = NULL;
        CCARRAY_FOREACH_4TYPE(arrayShow, MB_PicShow*, pPicShow)
        {
            MB_NodePicIcon* picNode = MB_NodePicIcon::create2();
            if (picNode != NULL)
            {
                if (pPicShow->getActivata()) {
                    activeCount++;
                }
                picNode->setData(pPicShow,kTypeEquipPic);
                picNode->setPosition(ccp(cellSize.width*(0.2f+index%PicDeploy_PERLINENUM)*0.83f,-92+(node->getContentSize().height - cellSize.height*PicDeploy_SPANHEIGHT*( -0.55f + int(index/PicDeploy_PERLINENUM)))));
                index++;
                node->addChild(picNode);
                NSGameHelper::runMoveAndOptAction(picNode, actionDealyTime, actionMoveTime, true, true);actionDealyTime+=actionSpanTime;
            }
        }
        m_pNodeContainer->addChild(node);
        
        sprintf(str,"%d",activeCount);
        m_pNowCount->setString(str);
    }
    onResetWnd();
}
